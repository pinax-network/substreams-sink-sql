// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: sf/substreams/sink/sql/schema/v1/schema.proto

package schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Table struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Name    string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ChildOf *string                `protobuf:"bytes,2,opt,name=child_of,json=childOf,proto3,oneof" json:"child_of,omitempty"`
	// should be remove
	ManyToOneRelationFieldName string `protobuf:"bytes,81,opt,name=many_to_one_relation_field_name,json=manyToOneRelationFieldName,proto3" json:"many_to_one_relation_field_name,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Table) Reset() {
	*x = Table{}
	mi := &file_sf_substreams_sink_sql_schema_v1_schema_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_sink_sql_schema_v1_schema_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_sf_substreams_sink_sql_schema_v1_schema_proto_rawDescGZIP(), []int{0}
}

func (x *Table) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Table) GetChildOf() string {
	if x != nil && x.ChildOf != nil {
		return *x.ChildOf
	}
	return ""
}

func (x *Table) GetManyToOneRelationFieldName() string {
	if x != nil {
		return x.ManyToOneRelationFieldName
	}
	return ""
}

type Column struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	ForeignKey    *string                `protobuf:"bytes,2,opt,name=foreign_key,json=foreignKey,proto3,oneof" json:"foreign_key,omitempty"`
	Unique        bool                   `protobuf:"varint,3,opt,name=unique,proto3" json:"unique,omitempty"`
	PrimaryKey    bool                   `protobuf:"varint,4,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Column) Reset() {
	*x = Column{}
	mi := &file_sf_substreams_sink_sql_schema_v1_schema_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_sink_sql_schema_v1_schema_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_sf_substreams_sink_sql_schema_v1_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Column) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Column) GetForeignKey() string {
	if x != nil && x.ForeignKey != nil {
		return *x.ForeignKey
	}
	return ""
}

func (x *Column) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *Column) GetPrimaryKey() bool {
	if x != nil {
		return x.PrimaryKey
	}
	return false
}

var file_sf_substreams_sink_sql_schema_v1_schema_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*Table)(nil),
		Field:         77701,
		Name:          "sf.substreams.sink.sql.schema.v1.table",
		Tag:           "bytes,77701,opt,name=table",
		Filename:      "sf/substreams/sink/sql/schema/v1/schema.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*Column)(nil),
		Field:         77702,
		Name:          "sf.substreams.sink.sql.schema.v1.field",
		Tag:           "bytes,77702,opt,name=field",
		Filename:      "sf/substreams/sink/sql/schema/v1/schema.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional sf.substreams.sink.sql.schema.v1.Table table = 77701;
	E_Table = &file_sf_substreams_sink_sql_schema_v1_schema_proto_extTypes[0]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional sf.substreams.sink.sql.schema.v1.Column field = 77702;
	E_Field = &file_sf_substreams_sink_sql_schema_v1_schema_proto_extTypes[1] //todo: ignore
)

var File_sf_substreams_sink_sql_schema_v1_schema_proto protoreflect.FileDescriptor

var file_sf_substreams_sink_sql_schema_v1_schema_proto_rawDesc = string([]byte{
	0x0a, 0x2d, 0x73, 0x66, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2f,
	0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x20, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73,
	0x69, 0x6e, 0x6b, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x4f, 0x66, 0x88, 0x01,
	0x01, 0x12, 0x43, 0x0a, 0x1f, 0x6d, 0x61, 0x6e, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x6e, 0x65,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6d, 0x61, 0x6e, 0x79,
	0x54, 0x6f, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x6f, 0x66, 0x22, 0x99, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a,
	0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x3a,
	0x60, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x85, 0xdf, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x3a, 0x5f, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x86, 0xdf, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x42, 0x92, 0x02, 0x0a, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x66, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2d,
	0x73, 0x69, 0x6e, 0x6b, 0x2d, 0x73, 0x71, 0x6c, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0xa2, 0x02, 0x05, 0x53, 0x53, 0x53, 0x53, 0x53, 0xaa, 0x02, 0x20, 0x53, 0x66, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x69, 0x6e, 0x6b, 0x2e,
	0x53, 0x71, 0x6c, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x20,
	0x53, 0x66, 0x5c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x5c, 0x53, 0x69,
	0x6e, 0x6b, 0x5c, 0x53, 0x71, 0x6c, 0x5c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x2c, 0x53, 0x66, 0x5c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x5c, 0x53, 0x69, 0x6e, 0x6b, 0x5c, 0x53, 0x71, 0x6c, 0x5c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x25, 0x53, 0x66, 0x3a, 0x3a, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x3a, 0x3a, 0x53, 0x69, 0x6e, 0x6b, 0x3a, 0x3a, 0x53, 0x71, 0x6c, 0x3a, 0x3a, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_sf_substreams_sink_sql_schema_v1_schema_proto_rawDescOnce sync.Once
	file_sf_substreams_sink_sql_schema_v1_schema_proto_rawDescData []byte
)

func file_sf_substreams_sink_sql_schema_v1_schema_proto_rawDescGZIP() []byte {
	file_sf_substreams_sink_sql_schema_v1_schema_proto_rawDescOnce.Do(func() {
		file_sf_substreams_sink_sql_schema_v1_schema_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sf_substreams_sink_sql_schema_v1_schema_proto_rawDesc), len(file_sf_substreams_sink_sql_schema_v1_schema_proto_rawDesc)))
	})
	return file_sf_substreams_sink_sql_schema_v1_schema_proto_rawDescData
}

var file_sf_substreams_sink_sql_schema_v1_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_sf_substreams_sink_sql_schema_v1_schema_proto_goTypes = []any{
	(*Table)(nil),                       // 0: sf.substreams.sink.sql.schema.v1.Table
	(*Column)(nil),                      // 1: sf.substreams.sink.sql.schema.v1.Column
	(*descriptorpb.MessageOptions)(nil), // 2: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),   // 3: google.protobuf.FieldOptions
}
var file_sf_substreams_sink_sql_schema_v1_schema_proto_depIdxs = []int32{
	2, // 0: sf.substreams.sink.sql.schema.v1.table:extendee -> google.protobuf.MessageOptions
	3, // 1: sf.substreams.sink.sql.schema.v1.field:extendee -> google.protobuf.FieldOptions
	0, // 2: sf.substreams.sink.sql.schema.v1.table:type_name -> sf.substreams.sink.sql.schema.v1.Table
	1, // 3: sf.substreams.sink.sql.schema.v1.field:type_name -> sf.substreams.sink.sql.schema.v1.Column
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	2, // [2:4] is the sub-list for extension type_name
	0, // [0:2] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sf_substreams_sink_sql_schema_v1_schema_proto_init() }
func file_sf_substreams_sink_sql_schema_v1_schema_proto_init() {
	if File_sf_substreams_sink_sql_schema_v1_schema_proto != nil {
		return
	}
	file_sf_substreams_sink_sql_schema_v1_schema_proto_msgTypes[0].OneofWrappers = []any{}
	file_sf_substreams_sink_sql_schema_v1_schema_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sf_substreams_sink_sql_schema_v1_schema_proto_rawDesc), len(file_sf_substreams_sink_sql_schema_v1_schema_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 2,
			NumServices:   0,
		},
		GoTypes:           file_sf_substreams_sink_sql_schema_v1_schema_proto_goTypes,
		DependencyIndexes: file_sf_substreams_sink_sql_schema_v1_schema_proto_depIdxs,
		MessageInfos:      file_sf_substreams_sink_sql_schema_v1_schema_proto_msgTypes,
		ExtensionInfos:    file_sf_substreams_sink_sql_schema_v1_schema_proto_extTypes,
	}.Build()
	File_sf_substreams_sink_sql_schema_v1_schema_proto = out.File
	file_sf_substreams_sink_sql_schema_v1_schema_proto_goTypes = nil
	file_sf_substreams_sink_sql_schema_v1_schema_proto_depIdxs = nil
}
