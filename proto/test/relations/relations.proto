syntax = "proto3";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";

import "sf/substreams/sink/sql/schema/v1/schema.proto";

package test.relations;
option go_package = "test/relations";


message Output {
  repeated Entity entities = 1;
}


message Entity {

  oneof entity {
    TypesTest types_test =1;

    Customer customer = 10;
    Order order = 11;
    Item item = 12;
  }
}

message TypesTest {
  option (sf.substreams.sink.sql.schema.v1.table) = { name: "types_tests" };

  uint64 id =1 [(sf.substreams.sink.sql.schema.v1.field) = { primary_key: true }];
  // Field for each protobuf native type
  double double_field = 2;
  float float_field = 3;
  int32 int32_field = 4;
  int64 int64_field = 5;
  uint32 uint32_field = 6;
  uint64 uint64_field = 7;
  sint32 sint32_field = 8;
  sint64 sint64_field = 9;
  fixed32 fixed32_field = 10;
  fixed64 fixed64_field = 11;
  sfixed32 sfixed32_field = 12;
  sfixed64 sfixed64_field = 13;
  bool bool_field = 14;
  string string_field = 15;
  bytes bytes_field = 16;

  google.protobuf.Timestamp timestamp_field = 30;

}

message Customer {
  option (sf.substreams.sink.sql.schema.v1.table) = { name: "customers" };

  string customer_id = 1 [(sf.substreams.sink.sql.schema.v1.field) = { primary_key: true }];
  string name = 2;
}

message Order {
  option (sf.substreams.sink.sql.schema.v1.table) = { name: "orders"};

  string order_id = 1 [(sf.substreams.sink.sql.schema.v1.field) = {  primary_key: true}];
  string customer_ref_id = 2 [(sf.substreams.sink.sql.schema.v1.field) = { foreign_key: "customers on customer_id"}];
  repeated OrderItem items = 3;
}

message OrderItem {
  option (sf.substreams.sink.sql.schema.v1.table) = {
    name: "order_items",
    child_of: "orders on order_id"
  };

  // can also leverage orders._id using "order on order_id" if order do not have a external unique identifier
  string item_id = 2 [(sf.substreams.sink.sql.schema.v1.field) = { foreign_key: "items on item_id"}];
  int64 quantity = 11;
}

message Item {
  option (sf.substreams.sink.sql.schema.v1.table) = { name: "items" };

  string item_id = 1 [(sf.substreams.sink.sql.schema.v1.field) = { unique: true }];

  string name = 10;
  double price = 11;
}
