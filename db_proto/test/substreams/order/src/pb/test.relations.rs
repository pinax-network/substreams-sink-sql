// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Output {
    #[prost(message, repeated, tag="1")]
    pub entities: ::prost::alloc::vec::Vec<Entity>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Entity {
    #[prost(oneof="entity::Entity", tags="1, 10, 11, 12")]
    pub entity: ::core::option::Option<entity::Entity>,
}
/// Nested message and enum types in `Entity`.
pub mod entity {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Entity {
        #[prost(message, tag="1")]
        TypesTest(super::TypesTest),
        #[prost(message, tag="10")]
        Customer(super::Customer),
        #[prost(message, tag="11")]
        Order(super::Order),
        #[prost(message, tag="12")]
        Item(super::Item),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TypesTest {
    #[prost(uint64, tag="1")]
    pub id: u64,
    /// Field for each protobuf native type
    #[prost(double, tag="2")]
    pub double_field: f64,
    #[prost(float, tag="3")]
    pub float_field: f32,
    #[prost(int32, tag="4")]
    pub int32_field: i32,
    #[prost(int64, tag="5")]
    pub int64_field: i64,
    #[prost(uint32, tag="6")]
    pub uint32_field: u32,
    #[prost(uint64, tag="7")]
    pub uint64_field: u64,
    #[prost(sint32, tag="8")]
    pub sint32_field: i32,
    #[prost(sint64, tag="9")]
    pub sint64_field: i64,
    #[prost(fixed32, tag="10")]
    pub fixed32_field: u32,
    #[prost(fixed64, tag="11")]
    pub fixed64_field: u64,
    #[prost(sfixed32, tag="12")]
    pub sfixed32_field: i32,
    #[prost(sfixed64, tag="13")]
    pub sfixed64_field: i64,
    #[prost(bool, tag="14")]
    pub bool_field: bool,
    #[prost(string, tag="15")]
    pub string_field: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="16")]
    pub bytes_field: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag="30")]
    pub timestamp_field: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Customer {
    #[prost(string, tag="1")]
    pub customer_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Order {
    #[prost(string, tag="1")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub customer_ref_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="3")]
    pub items: ::prost::alloc::vec::Vec<OrderItem>,
    #[prost(message, optional, tag="4")]
    pub extension: ::core::option::Option<OrderExtension>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrderExtension {
    #[prost(string, tag="1")]
    pub description: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrderItem {
    /// can also leverage orders._id using "order on order_id" if order do not have a external unique identifier
    #[prost(string, tag="2")]
    pub item_id: ::prost::alloc::string::String,
    #[prost(int64, tag="11")]
    pub quantity: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Item {
    #[prost(string, tag="1")]
    pub item_id: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub name: ::prost::alloc::string::String,
    #[prost(double, tag="11")]
    pub price: f64,
}
// @@protoc_insertion_point(module)
